<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<book lang="en">
<bookinfo>
    <title>The Maven Practical Guide</title>
    <date>2015-09</date>
    <author>
        <firstname>Karl-Heinz</firstname>
        <surname>Marbaise</surname>
        <email>the-maven-practical-guide@maven-practical-guide.com</email>
    </author>
    <authorinitials>KM</authorinitials>
<revhistory><revision><revnumber>0.0.5</revnumber><date>2015-09</date><authorinitials>KM</authorinitials></revision></revhistory>
</bookinfo>
<dedication id="_this_is_work_in_progress">
<title>THIS IS WORK IN PROGRESS</title>
<simpara>This is work in progress.</simpara>
<simpara>If you have any suggestions, improvements or issues
please use the following issue tracking system:</simpara>
<simpara><ulink url="https://github.com/khmarbaise/maven-practical-guide/issues">https://github.com/khmarbaise/maven-practical-guide/issues</ulink></simpara>
<simpara>Books are normally used to generate DocBook markup and the titles of
the preface, appendix, bibliography, glossary and index sections are
significant (<emphasis>specialsections</emphasis>).</simpara>
</dedication>
<preface id="_example_preface">
<title>Example Preface</title>
<simpara>Optional preface.</simpara>
<section id="_preface_sub_section">
<title>Preface Sub-section</title>
<simpara>Preface sub-section body.</simpara>
</section>
</preface>
<chapter id="_the_first_chapter">
<title>The First Chapter</title>
<simpara>Chapters can contain sub-sections nested up to three deep.
<footnote><simpara>An example footnote.</simpara></footnote>
<indexterm>
  <primary>Example index entry</primary>
</indexterm></simpara>
<simpara>Chapters can have their own bibliography, glossary and index.</simpara>
<simpara>And now for something completely different: <indexterm><primary>monkeys</primary></indexterm>monkeys, lions and
tigers (Bengal and Siberian) using the alternative syntax index
entries.
<indexterm>
  <primary>Big cats</primary><secondary>Lions</secondary>
</indexterm>
<indexterm>
  <primary>Lions</primary>
</indexterm>
<indexterm>
  <primary>Big cats</primary><secondary>Tigers</secondary><tertiary>Bengal Tiger</tertiary>
</indexterm>
<indexterm>
  <primary>Tigers</primary><secondary>Bengal Tiger</secondary>
</indexterm>
<indexterm>
  <primary>Bengal Tiger</primary>
</indexterm>
<indexterm>
  <primary>Big cats</primary><secondary>Tigers</secondary><tertiary>Siberian Tiger</tertiary>
</indexterm>
<indexterm>
  <primary>Tigers</primary><secondary>Siberian Tiger</secondary>
</indexterm>
<indexterm>
  <primary>Siberian Tiger</primary>
</indexterm>
Note that multi-entry terms generate separate index entries.</simpara>
<simpara>Here are a couple of image examples: an <inlinemediaobject>
  <imageobject>
  <imagedata fileref="images/smallnew.png"/>
  </imageobject>
  <textobject><phrase>images/smallnew.png</phrase></textobject>
</inlinemediaobject>
example inline image followed by an example block image:</simpara>
<figure><title>Tiger block image</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/apache-maven-project.png"/>
  </imageobject>
  <textobject><phrase>Apache Maven Project</phrase></textobject>
</mediaobject>
</figure>
<informalfigure>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/maventxt_logo_200.png"/>
  </imageobject>
  <textobject><phrase>Maven Logo</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Followed by an example table:</simpara>
<table
frame="all"
rowsep="1" colsep="1"
>
<title>An example table</title>
<?dbhtml table-width="60%"?>
<?dbfo table-width="60%"?>
<?dblatex table-width="60%"?>
<tgroup cols="2">
<colspec colname="col_1" colwidth="128*"/>
<colspec colname="col_2" colwidth="128*"/>
<thead>
<row>
<entry align="left" valign="top"> Option          </entry>
<entry align="left" valign="top"> Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>-a <emphasis>USER GROUP</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Add <emphasis>USER</emphasis> to <emphasis>GROUP</emphasis>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>-R <emphasis>GROUP</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Disables access to <emphasis>GROUP</emphasis>.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<example>
<title>An example example</title>
<simpara>Lorum ipum&#8230;</simpara>
</example>
<section id="X1">
<title>Sub-section with Anchor</title>
<simpara>Sub-section at level 2.</simpara>
<section id="_chapter_sub_section">
<title>Chapter Sub-section</title>
<simpara>Sub-section at level 3.</simpara>
<section id="_chapter_sub_section_2">
<title>Chapter Sub-section</title>
<simpara>Sub-section at level 4.</simpara>
<simpara>This is the maximum sub-section depth supported by the distributed
AsciiDoc configuration.
<footnote><simpara>A second example footnote.</simpara></footnote></simpara>
</section>
</section>
</section>
</chapter>
<chapter id="_the_second_chapter">
<title>The Second Chapter</title>
<simpara>An example link to anchor at start of the <link linkend="X1">first sub-section</link>.
<indexterm>
  <primary>Second example index entry</primary>
</indexterm></simpara>
<simpara>An example link to a bibliography entry <xref linkend="taoup"/>.</simpara>
</chapter>
<chapter id="_dependencies">
<title>Dependencies</title>
<simpara>We should make some examples how dependencies are
being solved (dependency puzzler).</simpara>
</chapter>
<chapter id="_the_basics">
<title>The Basics</title>
<itemizedlist>
<listitem>
<simpara>
Smallest POM file.
</simpara>
</listitem>
</itemizedlist>
<programlisting language="xml" linenumbering="unnumbered">&lt;project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;

  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;parent&gt;
    &lt;groupId&gt;com.soebes.tmpg.examples.basics&lt;/groupId&gt;
    &lt;artifactId&gt;basics-aggregator&lt;/artifactId&gt;
    &lt;version&gt;0.1.0-SNAPSHOT&lt;/version&gt;
  &lt;/parent&gt;

  &lt;groupId&gt;com.soebes.tmpg.examples.basics&lt;/groupId&gt;          &lt;!--1--&gt;
  &lt;artifactId&gt;simplest-pom&lt;/artifactId&gt;                       &lt;!--2--&gt;
  &lt;version&gt;0.1.0-SNAPSHOT&lt;/version&gt;                           &lt;!--3--&gt;

  &lt;name&gt;TMPG :: Examples :: Simplest POM&lt;/name&gt;

&lt;/project&gt;</programlisting>
<calloutlist>
<callout arearefs="">
<para>
The groupId
</para>
</callout>
<callout arearefs="">
<para>
The artifactId
</para>
</callout>
<callout arearefs="">
<para>
The version
</para>
</callout>
</calloutlist>
</chapter>
<chapter id="_the_build_life_cycle">
<title>The build life cycle</title>
</chapter>
<chapter id="_profiles_in_maven">
<title>Profiles in Maven</title>
<simpara>Why and how to use Profiles.</simpara>
<simpara>Typical scenarios where to use profiles.</simpara>
<simpara>CI build (jenkins) etc.</simpara>
<simpara><ulink url="http://blog.soebes.de/blog/2013/11/09/why-is-it-bad-to-activate-slash-deactive-modules-by-profiles-in-maven/">Don&#8217;t use profiles to activate/deactive modules</ulink></simpara>
<simpara>Situations where you shouldn&#8217;t use profiles.</simpara>
</chapter>
<part id="_different_environments">
<title>Different Environments</title>
<chapter id="_overview">
<title>Overview</title>
<simpara>In the wild a usual problem occurs having configurations for
different environments like development, test, q&amp;a and production.
The differences between those environments are most likely
things like username, password for an database connection or may
be other things.</simpara>
<simpara>I have to admit that the example with the database connection is not the
best, cause this would imply having such critical information within
your application which you never should do in real life. This is chosen
only as an example for information which are definitively different from
environment to environment.</simpara>
<simpara>Let us make a more realistic example out of this to get more relationship
to the real world. So we create an examples which consists of several files
which are different from environment to environment.</simpara>
<simpara>get the whole lecture of GearConf2013</simpara>
<simpara>How to build for prod, dev, qa environment etc.</simpara>
<simpara><ulink url="http://blog.soebes.de/blog/2011/07/29/maven-configuration-for-multipe-environments/">http://blog.soebes.de/blog/2011/07/29/maven-configuration-for-multipe-environments/</ulink></simpara>
<simpara><ulink url="http://blog.soebes.de/blog/2011/08/11/maven-configuration-for-multipe-environments-ii/">http://blog.soebes.de/blog/2011/08/11/maven-configuration-for-multipe-environments-ii/</ulink></simpara>
<section id="_the_solutions">
<title>The Solutions</title>
</section>
<section id="_the_obvious_solution">
<title>The Obvious Solution</title>
<simpara>Many people using Maven would suggest to use profiles for such
purposes. So you have different profiles which define the filtered
values for the appropriate environments and you will build the
appropriate artifacts.</simpara>
<simpara>This will result in calling Maven with the following commands to
produce artifacts for the different environments.</simpara>
<screen>mvn -Pdevelopment clean package
mvn -Ptest clean package
mvn -Pqa clean package
mvn -Pproduction clean package</screen>
<simpara>But unfortunately this approach has one big drawback. How would you
call Maven if you need the artifacts for development, test, q&amp;a and
production? So your answer might look like this?</simpara>
<screen>mvn -Pdevelopment,test,qa,production clean package</screen>
<simpara>The disadvantage of this approach is that you have to give all these
parameters every time you call Maven maybe in several permutations
depending for which environment you would like to build. What does in
practice happen?  You simple forget them. Have you remembered to change
the configuration of your CI solution? Have you informed all your
team mates? I bet you missed something.</simpara>
<simpara>So solution should work by simply calling Maven like this:</simpara>
<screen>mvn clean package</screen>
<simpara>So in conclusion this approach is not ideal.</simpara>
<simpara>Picture of the application ?</simpara>
<simpara>What are the drawbacks of such a solution?</simpara>
</section>
<section id="_the_next">
<title>The next</title>
</section>
</chapter>
</part>
<part id="_multi_module_builds">
<title>Multi Module Builds</title>
<chapter id="_overview_2">
<title>Overview</title>
<simpara>Sometimes it is enough having a single pom file and a limited number of java classes
which are combined into a single jar which is produced to get a full fledged project.
But this is only in a limited number of cases a solution for all kind of project types.
If we take a look at JEE projects which often contains several kinds of artifacts which
will be combined into a final single artifact usually an EAR file than the single
module setup is not really a good idea.
For this kind of purposes it&#8217;s verify useful having a so called multi module build
which combines the different artifacts under a single hood.</simpara>
<simpara>The idea of a multi-module-build is having multiple maven modules which are
released under the same version which are directly related.</simpara>
<simpara>Let us start with a simple example project which contains several modules like
the following:</simpara>
<screen>module-core
module-client
module-server</screen>
<simpara>Before we know about multi-module-builds you should have created three
separated maven projects and had to define dependencies between those modules
and work on them without any relationship.  Obviously you can imagine that the
above modules have relationship to each other, cause the <literal>module-client</literal> module
has a dependency to the <literal>module-core</literal> whereas the <literal>module-server</literal> has a
dependency to <literal>module-core</literal> and so on.</simpara>
<simpara>Wouldn&#8217;t it be the best if all the above module live within a single location
(git repository or SVN trunk for example) where you could simply checkout
those modules and work with your IDE on the whole project, cause if you need to
change something in your <literal>module-core</literal> it&#8217;s very likely that you need to change
the depending module <literal>module-client</literal> as well? Exactly for such purposes a
multi-module-build exists in Maven.</simpara>
<section id="_structure">
<title>Structure</title>
<simpara>Based on the idea of the relationship of the modules it is necessary to create
an appropriate folder structure which more or less shows the relationship of
the module to each other.</simpara>
<screen> +--- pom.xml
   +--- module-core
   +--- module-client
   +--- module-server</screen>
<simpara>There are some parts which you need to pay attention to, to get a good working
environment. The first thing is the pom on the root level of this structure.
This pom file contains no code nor does it produce an artifact as the usual
maven project. This means in other words it does not produce an <literal>jar</literal>-File.
This is the reason why this Maven project defines it&#8217;s packaging as <literal>pom</literal>.</simpara>
<screen>&lt;project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;

  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;parent&gt;
    &lt;groupId&gt;com.soebes.smpp&lt;/groupId&gt;
    &lt;artifactId&gt;smpp&lt;/artifactId&gt;
    &lt;version&gt;2.1.0&lt;/version&gt;
  &lt;/parent&gt;

  &lt;groupId&gt;com.soebes.mpg.examples.mmb&lt;/groupId&gt;
  &lt;artifactId&gt;parent&lt;/artifactId&gt;
  &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;pom&lt;/packaging&gt;
  ..
  &lt;modules&gt;
    &lt;module&gt;module-core&lt;/module&gt;
    &lt;module&gt;module-client&lt;/module&gt;
    &lt;module&gt;module-server&lt;/module&gt;
  &lt;/modules&gt;
  ..
&lt;/project&gt;</screen>
<simpara>Apart from the above you need to define the list of modules which you
would like include in this parent. It is best practice to name the
folders as their appropriate <literal>artifactId</literal>. So now let us take a look
at a module how its pom file looks like:</simpara>
<screen>&lt;project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;

  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;parent&gt;
    &lt;groupId&gt;com.soebes.mpg.examples.mmb&lt;/groupId&gt;
    &lt;artifactId&gt;parent&lt;/artifactId&gt;
    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
  &lt;/parent&gt;

  &lt;artifactId&gt;module-core&lt;/artifactId&gt;
...
&lt;/project&gt;</screen>
<simpara><ulink url="http://stackoverflow.com/questions/11528877/releasing-a-multi-module-maven-project-hosted-in-single-git-repository/">See here</ulink></simpara>
<simpara>What is the basic idea of a multi module build? Same version? Same time of releasing them.</simpara>
<itemizedlist>
<listitem>
<simpara>
Multiple Modules
</simpara>
</listitem>
<listitem>
<simpara>
mvn install (first why?)
</simpara>
</listitem>
<listitem>
<simpara>
Unit Tests (mvn test)
</simpara>
</listitem>
<listitem>
<simpara>
Integration Test (mvn integration-test)
</simpara>
</listitem>
<listitem>
<simpara>
packaging
</simpara>
</listitem>
<listitem>
<simpara>
use of an module from a reactor build in other projects?
</simpara>
</listitem>
</itemizedlist>
<simpara>Pro&#8217;s and Cons'
<ulink url="http://stackoverflow.com/questions/23584429/releasing-a-modular-maven-project">http://stackoverflow.com/questions/23584429/releasing-a-modular-maven-project</ulink></simpara>
<simpara>Jenkins support for separated maven projects to be released:
<ulink url="https://wiki.jenkins-ci.org/display/JENKINS/Maven+Cascade+Release+Plugin">https://wiki.jenkins-ci.org/display/JENKINS/Maven+Cascade+Release+Plugin</ulink></simpara>
<simpara>Aggregator ? Difference.</simpara>
<simpara><ulink url="http://stackoverflow.com/questions/23936339/maven-parent-project-structure">http://stackoverflow.com/questions/23936339/maven-parent-project-structure</ulink></simpara>
<simpara>What if only a single modules code has been changed? Can i release only a single
module from the multi module build? Draw backs?</simpara>
</section>
</chapter>
</part>
<part id="_testing_with_maven">
<title>Testing with Maven</title>
<chapter id="_overview_3">
<title>Overview</title>
<simpara>Basic Unit Testing, Responsibilities of Plugins, Using JUnit, TestNG,
multi module builds and unit tests.</simpara>
<simpara>This chapter will give some practical hints how you can use unit- and
integration tests in relationship with Maven. Furthermore it will give
you tipps how to prevent several issues with testing.</simpara>
<simpara>Think about some examples about the following:
<ulink url="http://stackoverflow.com/questions/23588707/maven-layout-how-to-be-sure-that-src-main-does-not-depend-on-src-test">http://stackoverflow.com/questions/23588707/maven-layout-how-to-be-sure-that-src-main-does-not-depend-on-src-test</ulink></simpara>
<simpara><ulink url="http://stackoverflow.com/questions/23659829/maven-run-class-before-test-phase-exec-maven-plugin-execjava-not-executing-cla">http://stackoverflow.com/questions/23659829/maven-run-class-before-test-phase-exec-maven-plugin-execjava-not-executing-cla</ulink></simpara>
<simpara>Information:
<ulink url="http://labs.carrotsearch.com/randomizedtesting.html">http://labs.carrotsearch.com/randomizedtesting.html</ulink>
<ulink url="http://stackoverflow.com/questions/8295100/how-to-re-run-failed-junit-tests-immediately">http://stackoverflow.com/questions/8295100/how-to-re-run-failed-junit-tests-immediately</ulink></simpara>
<simpara><ulink url="https://blog.42.nl/articles/keeping-integration-tests-isolated/">https://blog.42.nl/articles/keeping-integration-tests-isolated/</ulink></simpara>
<section id="_unit_testing">
<title>Unit Testing</title>
<simpara>Unit testing can be done out-of-box in Maven which means you just have
to locate your unit tests into <emphasis>src/test/java</emphasis> and follow the naming
conventions. The resulting and recommended folder structure will be show
in the followin example.</simpara>
<programlisting language="xml" linenumbering="numbered">.
|-- pom.xml
`-- src
    |-- main
    |   `-- java
    |       `-- com
    |           `-- soebes
    |               `-- training
    |                   `-- maven
    |                       `-- simple
    |                           `-- BitMask.java
    `-- test
        `-- java
            `-- com
                `-- soebes
                    `-- training
                        `-- maven
                            `-- simple
                                `-- BitMaskTest.java</programlisting>
<simpara>The folder <emphasis>src/main/java</emphasis> plus an approriate package structure will
contain your production code whereas the <emphasis>src/test/java</emphasis> plus the
package structure will contains your unit test area.</simpara>
<table
frame="all"
rowsep="1" colsep="1"
>
<title>Naming Schema for Unit Tests</title>
<?dbhtml table-width="60%"?>
<?dbfo table-width="60%"?>
<?dblatex table-width="60%"?>
<tgroup cols="2">
<colspec colname="col_1" colwidth="128*"/>
<colspec colname="col_2" colwidth="128*"/>
<thead>
<row>
<entry align="left" valign="top"> Name Pattern    </entry>
<entry align="left" valign="top"> Example</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Test*.java</simpara></entry>
<entry align="left" valign="top"><simpara>TestBitMask.java</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>*Test.java</simpara></entry>
<entry align="left" valign="top"><simpara>BitMaskTest.java</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>*TestCase.java</simpara></entry>
<entry align="left" valign="top"><simpara>BitMaskTestCase.java</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>The following simple example will show how a basic unit test can look
like.</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.soebes.training.maven.simple;

import static junit.framework.Assert.assertEquals;

import org.junit.Test;

public class BitMaskTest {

    @Test
    public void checkFirstBitTest() {
        BitMask bm = new BitMask(0x8000000000000000L);
        assertEquals(true, bm.isBitSet(63));
    }

    @Test
    public void checkNumberBitTest() {
        for (int bitNumber = 0; bitNumber &lt; 64; bitNumber++) {
            long bitMask = Long.rotateLeft(1, bitNumber);
            BitMask bm = new BitMask(bitMask);
            assertEquals(true, bm.isBitSet(bitNumber));
        }
    }

    @Test
    public void setBitNumberTest() {
        BitMask bm = new BitMask();
        for (int bitNumber = 0; bitNumber &lt; 64; bitNumber++) {
            bm.setBit(bitNumber);
            assertEquals(true, bm.isBitSet(bitNumber));
        }
    }

    @Test
    public void unsetBitNumberTest() {
        BitMask bm = new BitMask();
        for (int bitNumber = 0; bitNumber &lt; 64; bitNumber++) {
            bm.setBit(bitNumber);
        }
        for (int bitNumber = 0; bitNumber &lt; 64; bitNumber++) {
            bm.unsetBit(bitNumber);
            assertEquals(false, bm.isBitSet(bitNumber));
        }
    }

    @Test
    public void adhocBitTest() {
        BitMask bm = new BitMask(0xffffffffffffffffL);
        bm.unsetBit(10);
        bm.unsetBit(20);
        bm.unsetBit(30);
        bm.unsetBit(40);
        bm.unsetBit(50);
        bm.unsetBit(60);

        assertEquals(false, bm.isBitSet(10));
        assertEquals(false, bm.isBitSet(20));
        assertEquals(false, bm.isBitSet(30));
        assertEquals(false, bm.isBitSet(40));
        assertEquals(false, bm.isBitSet(50));
        assertEquals(false, bm.isBitSet(60));
    }
}</programlisting>
<simpara>So if you follow the conventions in Maven and put your tests into the
appropriate locations <emphasis>src/test/java</emphasis> those tests will automatically
be picked up and executed as unit tests. The plugin which is
responsible for execution of those unit tests is the
<ulink url="http://maven.apache.org/plugins/maven-surefire-plugin/">Maven Surefire Plugin</ulink>.</simpara>
<simpara>Make an example output here&#8230;.</simpara>
<simpara>An important thing to think of is sometimes which test framework you
would like to use? There are things like <ulink url="http://junit.org">JUnit</ulink>, <ulink url="http://testng.org">TestNG</ulink>,
Spock and of course many other opportunities.</simpara>
<simpara>In the case you would like to use <ulink url="http://junit.org">JUnit</ulink> within your unit tests
you just simply add the appropriate dependency to your <emphasis>pom.xml</emphasis> and
that&#8217;s it.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;

  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;parent&gt;
    &lt;groupId&gt;com.soebes.tmpg.examples.testing&lt;/groupId&gt;
    &lt;artifactId&gt;tmpg-examples-aggregator&lt;/artifactId&gt;
    &lt;version&gt;0.1.0-SNAPSHOT&lt;/version&gt;
  &lt;/parent&gt;

  &lt;groupId&gt;com.soebes.tmpg.examples.testing.ut-example&lt;/groupId&gt;
  &lt;artifactId&gt;unit-test-example&lt;/artifactId&gt;
  &lt;version&gt;0.1.0-SNAPSHOT&lt;/version&gt;

  &lt;name&gt;TMPG :: Testing :: Unit Test Example&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;4.11&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

&lt;/project&gt;</programlisting>
<simpara>If you prefer <ulink url="http://testng.org">TestNG</ulink> to use for your unit tests you can simply
add the dependency for <ulink url="http://testng.org">TestNG</ulink> and your unit tests can be run as
well without any supplemental change except the changes based on the
differences between <ulink url="http://junit.org">JUnit</ulink> and <ulink url="http://testng.org">TestNG</ulink> itself.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;

  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;parent&gt;
    &lt;groupId&gt;com.soebes.tpmg.examples.testing&lt;/groupId&gt;
    &lt;artifactId&gt;tpmg-examples-aggregator&lt;/artifactId&gt;
    &lt;version&gt;0.1.0-SNAPSHOT&lt;/version&gt;
  &lt;/parent&gt;

  &lt;groupId&gt;com.soebes.tpmg.examples.testing.ut-example&lt;/groupId&gt;
  &lt;artifactId&gt;unit-test-example-testng&lt;/artifactId&gt;
  &lt;version&gt;0.1.0-SNAPSHOT&lt;/version&gt;

  &lt;name&gt;TMPG :: Testing :: Unit Test Example (TestNG)&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.testng&lt;/groupId&gt;
      &lt;artifactId&gt;testng&lt;/artifactId&gt;
      &lt;version&gt;6.8.7&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

&lt;/project&gt;</programlisting>
<simpara>Location of unit tests</simpara>
<simpara><emphasis>src/test/java</emphasis> is the correct location for unit tests.</simpara>
<simpara>Packaging of unit tests
execution of unit tests
Support of testing frameworks
JUnit, TestNG, Spock?, BDD ?</simpara>
</section>
<section id="_integration_testing">
<title>Integration Testing</title>
<simpara>What is integration tests?
How to use? Naming convention?
In which cases should be used a separate module?</simpara>
<simpara>Test an web application with Selenium? (Examples).</simpara>
<section id="_importance_of_separation">
<title>Importance of Separation</title>
<simpara>Why is it important to separate between unit tests and integration
tests?</simpara>
<simpara>If look into the formal definition of unit tests you will read things
like independent from any resource etc.  So you can by definition
parallelize unit tests in general. If you don&#8217;t have real unit tests
you can&#8217;t go that simple path to improve your build time.</simpara>
<simpara>In controdiction integration tests are not independent and could not
be parallized by default. Under special circumstances you might change
cause you know your code and of course your tests. This means to
parallelize integration tests is always a task which should be done
separately.</simpara>
<simpara><ulink url="http://tempusfugitlibrary.org/documentation/">http://tempusfugitlibrary.org/documentation/</ulink>
<ulink url="http://labs.carrotsearch.com/randomizedtesting.html">http://labs.carrotsearch.com/randomizedtesting.html</ulink></simpara>
<simpara><ulink url="http://zeroturnaround.com/rebellabs/the-correct-way-to-use-integration-tests-in-your-build-process/">http://zeroturnaround.com/rebellabs/the-correct-way-to-use-integration-tests-in-your-build-process/</ulink></simpara>
</section>
</section>
</chapter>
</part>
<part id="_maven_assemblies">
<title>Maven Assemblies</title>
<chapter id="_overview_4">
<title>Overview</title>
<simpara>During the use usage you will often be faced with the situation to
create a kind of a distribution archive for example <emphasis>dist.zip</emphasis> or
<emphasis>dist.tar.gz</emphasis> or other kind of archive flavors. Things which also
happen are to create a so called <emphasis>ueber</emphasis> jar which you can use to call
your java application from the command line (There are other
opportunities as well see Chapter &#8230;).
Furthermore you often have the requirement to create archives
with different configurations for different environments this
also achievable.</simpara>
<simpara>This chapter will give a wide
overview of the possibilities how you can create the different flavors
of archives which you need to fullfil the requirements of your builds
furthermore we will take a look what kind of mistakes you can make and
how to prevent them.</simpara>
</chapter>
<chapter id="_the_maven_assembly_plugin">
<title>The Maven Assembly Plugin</title>
<simpara>The <ulink url="http://maven.apache.org/plugins/maven-assembly-plugin/">Maven Assembly Plugin</ulink> is especially created for such purposes to
create any kind of archive type.</simpara>
<section id="_single_executable_artifact">
<title>Single Executable Artifact</title>
<simpara>One of the requirements you will often be confronted with is to create an
archive which can simply be executed on command line. This is often called an
<emphasis>ueber-jar</emphasis> or <emphasis>fat-jar</emphasis> (or Maven tongue: jar-with-dependencies).  This can simply be accomplished by
using <ulink url="http://maven.apache.org/plugins/maven-assembly-plugin/">Maven Assembly Plugin</ulink>'s <ulink url="http://maven.apache.org/plugins/maven-assembly-plugin/descriptor-refs.html">pre-defined descriptors</ulink>.</simpara>
<simpara>The following pom.xml example will give you an impression how the
configuration for <ulink url="http://maven.apache.org/plugins/maven-assembly-plugin/">Maven Assembly Plugin</ulink> needs to look like to get
a <literal>jar-with-dependencies</literal>.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;

  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;parent&gt;
    &lt;groupId&gt;com.soebes.tmpg.examples.assemblies&lt;/groupId&gt;
    &lt;artifactId&gt;tmpg-assemblies-aggregator&lt;/artifactId&gt;
    &lt;version&gt;0.1.0-SNAPSHOT&lt;/version&gt;
  &lt;/parent&gt;

  &lt;artifactId&gt;assembly-jar-with-dependencies&lt;/artifactId&gt;
  &lt;name&gt;TMPG :: Assemblies :: JAR With Dependencies&lt;/name&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.testng&lt;/groupId&gt;
      &lt;artifactId&gt;testng&lt;/artifactId&gt;
      &lt;version&gt;6.8.8&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;make-jar-with-dependencies&lt;/id&gt;
            &lt;phase&gt;package&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;single&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;descriptorRefs&gt;
                &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
              &lt;/descriptorRefs&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;</programlisting>
<simpara>By using the above pom you will get a jar which contains all the
dependencies you have defined in your pom file as part of the resulting
jar which is named by using a classifier <literal>jar-with-dependencies</literal> to
make it distinguishable from the other artifacts. The other aspect of
this example project is that you can see how simple it is to create
such an artifact. One thing which should be mentioned about the
<ulink url="http://maven.apache.org/plugins/maven-assembly-plugin/">Maven Assembly Plugin</ulink>. It is not bound to any
<ulink url="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html">Build Life Cycle Phase</ulink> by default which means you need to bind it to
the life-cylce explicitly if you like to use it.</simpara>
<simpara>A note about the given example. In real life you should find this
example suspicious, cause it will use a typical test dependency (TestNG)
without the scope <literal>test</literal> which is usually wrong. In this case it is
only use for example purposes.</simpara>
<simpara>The created <literal>jar-with-dependencies</literal> can simply be used by the following:</simpara>
<screen>java -jar target/assembly-jar-with-dependencies-0.1.0-SNAPSHOTS-jar-with-dependency.jar</screen>
</section>
<section id="_creating_an_zip_archive">
<title>Creating an ZIP Archive</title>
<simpara>The idea of an archive is have particular content which is defined
by the project in the way you like to do that and define how it will look
like within the archive. This means having a folder structure within
the archive or not.</simpara>
</section>
<section id="_default_assemblies">
<title>Default Assemblies</title>
<itemizedlist>
<listitem>
<simpara>
Default assemblies
</simpara>
</listitem>
<listitem>
<simpara>
Archive types
</simpara>
</listitem>
<listitem>
<simpara>
Component Descriptors
</simpara>
</listitem>
<listitem>
<simpara>
Distribution archive
</simpara>
</listitem>
<listitem>
<simpara>
empty folders etc.
</simpara>
</listitem>
</itemizedlist>
<simpara>Typical scenarios which occur often.</simpara>
<simpara>Create a jar with all dependencies which might be used to call simply java program as a command line
tool.
Alternatives <ulink url="http://maven.apache.org/plugins/maven-shade-plugin/">Maven Shade Plugin</ulink>.</simpara>
<simpara>You would like to create an distribution archive which contains the resulting components of your application.
Examples.</simpara>
<simpara>You would like to create an archive with all sources of your project as well as the sources
of all the used dependencies:</simpara>
<screen>mvn dependency:sources
mvn dependency:copy-dependencies -Dclassifier=sources -DoutputDirectory=target/sources</screen>
<simpara>Add here all the examples from my example-assemblies</simpara>
<simpara>Special requirements which you can fulfil with maven-assembly-plugin
<ulink url="http://stackoverflow.com/questions/24311053/how-to-get-the-content-of-a-directory-inside-of-war-that-is-inside-of-an-ear-tha">http://stackoverflow.com/questions/24311053/how-to-get-the-content-of-a-directory-inside-of-war-that-is-inside-of-an-ear-tha</ulink></simpara>
</section>
<section id="_predefined_descriptors">
<title>Predefined Descriptors</title>
<simpara>The predefined descriptors fulfil the need of often requests archive types which should be usable in a very short time.
You could use them in a very simple form.</simpara>
</section>
<section id="_module_sets">
<title>Module Sets</title>
</section>
<section id="_dependency_sets">
<title>Dependency Sets</title>
</section>
<section id="_sources">
<title>Sources</title>
</section>
<section id="_predefined_descriptors_2">
<title>Predefined Descriptors</title>
<simpara>Currently there are four of them:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
<ulink url="http://maven.apache.org/plugins/maven-assembly-plugin/descriptor-refs.html#bin">bin</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
<ulink url="http://maven.apache.org/plugins/maven-assembly-plugin/descriptor-refs.html#jar-with-dependencies">jar-with-dependencies</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
<ulink url="http://maven.apache.org/plugins/maven-assembly-plugin/descriptor-refs.html#src">src</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
<ulink url="http://maven.apache.org/plugins/maven-assembly-plugin/descriptor-refs.html#project">project</ulink>
</simpara>
</listitem>
</orderedlist>
</section>
</chapter>
</part>
<part id="_plugins">
<title>Plugins</title>
<chapter id="_overview_5">
<title>Overview</title>
<simpara>The plugins of Maven building the foundation of the Maven eco system,
cause if you download Maven itself it&#8217;s a relative small archive
(less than 8 <ulink url="http://en.wikipedia.org/wiki/Binary_prefix#Specific_units_of_IEC_60027-2_A.2_and_ISO.2FIEC_80000">MiB</ulink>) and Maven itself is more or less only a IoC
container which supports the life-cycle and other small things. If you
like to compile for example your source code this is provided by the
<ulink url="http://maven.apache.org/plugins/maven-compiler-plugin/">Maven Compiler Plugin</ulink> with the appropriate functionality.</simpara>
<simpara>This chapter will give you an overview of the different areas of
plugins sources, the different ideas of the plugins and their typical
usage within a Java project build.</simpara>
<section id="_the_plugin_sources">
<title>The Plugin Sources</title>
<simpara>In general there are two big sources of plugin. The first source is
the area under the umbrella of the <ulink url="http://www.apache.org/">Apache Software Foundation</ulink>.
I will call them the <emphasis role="strong">Core Maven Plugins</emphasis>. The reason for this is that
you will find plugins like <ulink url="http://maven.apache.org/plugins/maven-compiler-plugin/">Maven Compiler Plugin</ulink>,
<ulink url="http://maven.apache.org/plugins/maven-jar-plugin/">Maven Jar Plugin</ulink> etc. in that area which provide the most basic
functionality for your build.</simpara>
<simpara>The second source is the MojoHouse area which also provides a
large number of maven plugins (<ulink url="http://www.mojohaus.org/plugins.html">http://www.mojohaus.org/plugins.html</ulink>).</simpara>
<simpara>Other sources of PLugins (JBoss, Tomcat, Antlr, google code (Maven
Processor Plugin)</simpara>
<simpara>jaxws-maven-plugin ? (URL?)</simpara>
<simpara>Describe more sources and other plugins</simpara>
<simpara>Groovy Plugins</simpara>
</section>
</chapter>
<chapter id="_the_different_plugins">
<title>The Different Plugins</title>
<simpara>In this chapter we will take a look on more or less every plugin which
is a participant of a usual Java build or to be more accurate a
participant of the <ulink url="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html">Build Life Cycle</ulink>.</simpara>
<simpara>The lifecycle contains already bindings for usual plugins so
in the majority of the cases its enough to build usual projects.</simpara>
<section id="_clean_everything">
<title>Clean Everything</title>
<simpara>If you want to be sure your build will start from scratch you need to
wipe out everything which has been created by previous operations or
the build itself. So the <ulink url="http://maven.apache.org/plugins/maven-clean-plugin/">Maven Clean Plugin</ulink> is your friend
which will delete the <emphasis>target</emphasis> folder of your project or in every
module in case of a multi-module build. This can be simply achieved by
calling maven like this:</simpara>
<screen>mvn clean</screen>
<simpara>Usualy you won&#8217;t ever think about the <ulink url="http://maven.apache.org/plugins/maven-clean-plugin/">Maven Clean Plugin</ulink>, cause
by default it&#8217;s bound to the <emphasis>clean</emphasis> <ulink url="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html">Build Life Cycle Phase</ulink> and there
is no reason to change the configuration of the
<ulink url="http://maven.apache.org/plugins/maven-clean-plugin/">Maven Clean Plugin</ulink> or something similar. In rare situations it
could happen that you need to change the configuration and add
supplemental folders or files which should be deleted during a <emphasis>mvn
clean</emphasis> call.</simpara>
<simpara>HINT: Something about the clean life cylce of the maven super pom!!</simpara>
<simpara>In the clean life cycle the following phases exist: pre-clean, clean, post-clean.</simpara>
</section>
<section id="_resources">
<title>Resources</title>
<simpara>Often it occurs that your java code needs some kind of configuration
files.  One of the most famous examples for this kind of
configurations is one of those numerous logging frameworks like log4j,
logback, log4j2 etc.  So the question is where to locate such
configuration files? The <ulink url="http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html">Default Folder Layout</ulink> gives you the
hint to put such things into <emphasis>src/main/resources</emphasis> which is of
course intended for the production code (in other words which is
packaged later into the jar file). Furthermore it is often the case as
well as having different configuration files for your unit tests cause
you would like having a different logging level in your unit test so
you need a different set of files which should be located into
<emphasis>src/test/resources</emphasis>. This means in other words those files will not
be packaged into the resulting jar file.</simpara>
<simpara>TODO: Move the following to test phase</simpara>
<simpara>HINT about super pom !</simpara>
<simpara>So usually you can simply put your appropriate configuration files
into <emphasis>src/test/resources</emphasis> or <emphasis>src/main/resources</emphasis> and they will
automatically be copied into <emphasis>target/classes</emphasis> or
<emphasis>target/test-classes</emphasis>.  But why are they copied ? The most important
point about this is that you can use such resources by the usual java
resources way like this:</simpara>
<simpara>code example (getClass().getResourcesAsStream("/log4j.properties");
This works for unit tests and for your production code! (good example?)</simpara>
<simpara>One important thing to mention is that the order on your class path
is that the resources from your test resources coming first before
your production code which means you can give a different configurtation file
for every file which you already use in your production code and so you
can change the behaviour in your unit tests to change things for example
the logging level or something else.</simpara>
<itemizedlist>
<listitem>
<simpara>
<ulink url="http://maven.apache.org/plugins/maven-resources-plugin/">Maven Resources Plugin</ulink>
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_let_the_source_be_with_you">
<title>Let The Source Be With You</title>
<simpara>You usually write Java source code (ok ok sometimes you write
difference sources like <ulink url="http://http://groovy-lang.org/">Groovy</ulink>, <ulink url="http://scala.org">Scala</ulink>, <ulink url="http://ceylon-lang.org">Ceylon</ulink> or
whatever) and of course you would like to compile such code into
usable class files which can be used to run your application
or to run your unit tests.</simpara>
<simpara>This is the purpose of the <ulink url="http://maven.apache.org/plugins/maven-compiler-plugin/">Maven Compiler Plugin</ulink> which will
compile your source code into class files.</simpara>
<simpara>The source code is located in <emphasis>src/main/java</emphasis> and will be compiled
into the <emphasis>target/classes</emphasis> folder. Apart from that the Maven Compiler
Plugin is also responsible to compile your unit/integration test code
which is located in <emphasis>src/test/java</emphasis> into <emphasis>target/test-classes</emphasis>.</simpara>
</section>
<section id="_let_8217_s_see_if_the_code_is_working">
<title>Let&#8217;s See If The Code Is Working?</title>
<simpara>After we have compiled the whole code we should run the unit tests to
check our code. This is done before the code will be packaged into a
jar file, cause if one of your unit tests will fail your build will
fail and no packages are being built.</simpara>
<simpara>For this purpose the <ulink url="http://maven.apache.org/plugins/maven-surefire-plugin/">Maven Surefire Plugin</ulink> is responsible
to run those unit tests.</simpara>
</section>
<section id="_let_the_jar_8217_s_come_to_me">
<title>Let The Jar&#8217;s Come To Me</title>
<simpara>After the production code has been compiled into the appropriate
<emphasis>.class</emphasis> files they will be packed into a jar file which is the base
unit to be distributed.  The jar will contain only the files from
<emphasis>target/classes</emphasis>.  So if you don&#8217;t do something special your unit
tests will never be packed into jar files.</simpara>
<simpara>The <ulink url="http://maven.apache.org/plugins/maven-jar-plugin/">Maven Jar Plugin</ulink> is bound to the <emphasis>package</emphasis> build life cycle
phase to create a jar file. This jar file contains only the files from
the <emphasis>src/main/java</emphasis> inclusive the resources from <emphasis>src/main/resources</emphasis>
area (Let use call it the production code area).</simpara>
<simpara>There exsist situations where you like to package your test code into
a jar as well. This can be achieved by using the <literal>test-jar</literal> goal of the
<ulink url="http://maven.apache.org/plugins/maven-jar-plugin/">Maven Jar Plugin</ulink>.</simpara>
<simpara>See examples (testing with common code).</simpara>
<itemizedlist>
<listitem>
<simpara>
<ulink url="http://maven.apache.org/plugins/maven-jar-plugin/">Maven Jar Plugin</ulink>
</simpara>
<simpara>Creating test-jars
non transitive behaviour of test-jar artifact. Solution create a usual separate module.</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_install_the_archive">
<title>Install The Archive</title>
<simpara>After the jar archive has been created the archive can be installed into the local
repository to be consumed by other projects on the same machine. For such a purpose
the <ulink url="http://maven.apache.org/plugins/maven-install-plugin/">Maven Install Plugin</ulink> is responsible.</simpara>
</section>
<section id="_distribute_it_to_the_world">
<title>Distribute It To The World</title>
<simpara>To break the limits of your machine you can distribute an jar archive to
a remote repository which can be used by other users.
For this the <ulink url="http://maven.apache.org/plugins/maven-deploy-plugin/">Maven Deploy Plugin</ulink>.</simpara>
<itemizedlist>
<listitem>
<simpara>
<ulink url="http://maven.apache.org/plugins/maven-war-plugin/">Maven WAR Plugin</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
<ulink url="http://maven.apache.org/plugins/maven-ear-plugin/">Maven EAR Plugin</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
<ulink url="http://maven.apache.org/plugins/maven-ejb-plugin/">Maven EJB Plugin</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
<ulink url="http://maven.apache.org/plugins/maven-shade-plugin/">Maven Shade Plugin</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
<ulink url="http://maven.apache.org/plugins/maven-deploy-plugin/">Maven Deploy Plugin</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
<ulink url="http://maven.apache.org/plugins/maven-install-plugin/">Maven Install Plugin</ulink>
</simpara>
<simpara>Idea and usage? Why?
* <ulink url="http://www.mojohaus.org/buildnumber-maven-plugin/">Mojo&#8217;s Buildnumber Maven Plugin</ulink>
* <ulink url="http://www.mojohaus.org/build-helper-maven-plugin/">Mojo&#8217;s Build Helper Maven Plugin</ulink>
* <ulink url="http://www.mojohaus.org/appassembler-maven-plugin">Mojo&#8217;s Appassembler Maven Plugin</ulink>
* <ulink url="http://https://codehaus-cargo.github.io/cargo/Maven2+plugin.html">Mojo&#8217;s Cargo Maven 2 Plugin</ulink>
* <ulink url="http://www.mojohaus.org/exec-maven-plugin/">Mojo&#8217;s Exec Maven Plugin</ulink>
* <ulink url="http://www.mojohaus.org/sql-maven-plugin/">Mojo&#8217;s SQL Maven Plugin</ulink>
* <ulink url="http://www.mojohaus.org/templating-maven-plugin/">Mojo&#8217;s Templating Maven Plugin</ulink>
* <ulink url="http://www.mojohaus.org/version-maven-plugin/">Mojo&#8217;s Versions Maven Plugin</ulink>
* ??ß</simpara>
</listitem>
</itemizedlist>
<simpara><ulink url="http://mojo.codehaus.org/clirr-maven-plugin/">http://mojo.codehaus.org/clirr-maven-plugin/</ulink></simpara>
<simpara>Google Code:
maven-processor-plugin
<ulink url="http://stackoverflow.com/questions/24345920/could-i-use-java-6-annotation-processors-jsr-269-to-produce-code-for-gwt-in-ma">http://stackoverflow.com/questions/24345920/could-i-use-java-6-annotation-processors-jsr-269-to-produce-code-for-gwt-in-ma</ulink></simpara>
<simpara><ulink url="http://mvnplugins.fusesource.org/maven/1.4/maven-uberize-plugin/compared-to-shade.html">http://mvnplugins.fusesource.org/maven/1.4/maven-uberize-plugin/compared-to-shade.html</ulink></simpara>
<simpara>maven-graph-plugin</simpara>
<simpara><ulink url="https://github.com/fusesource/mvnplugins/">https://github.com/fusesource/mvnplugins/</ulink></simpara>
<simpara>(Looks intresting)
<ulink url="http://site.kuali.org/maven/plugins/graph-maven-plugin/1.2.3/dependency-graphs.html">http://site.kuali.org/maven/plugins/graph-maven-plugin/1.2.3/dependency-graphs.html</ulink>
Can add the graphs a reports to the build.
Take a deeper look into it.
<ulink url="http://site.kuali.org/maven/plugins/">http://site.kuali.org/maven/plugins/</ulink></simpara>
<simpara>Checksums
<ulink url="http://nicoulaj.github.io/checksum-maven-plugin/">http://nicoulaj.github.io/checksum-maven-plugin/</ulink></simpara>
<simpara>nar-maven-plugin:
<ulink url="https://github.com/maven-nar/nar-maven-plugin">https://github.com/maven-nar/nar-maven-plugin</ulink></simpara>
<simpara><ulink url="https://github.com/marceloverdijk/lesscss-maven-plugin">https://github.com/marceloverdijk/lesscss-maven-plugin</ulink></simpara>
<simpara>Take a deeper look into this
<ulink url="http://docs.spring.io/spring-boot/docs/1.1.4.RELEASE/maven-plugin/usage.html">http://docs.spring.io/spring-boot/docs/1.1.4.RELEASE/maven-plugin/usage.html</ulink>
spring-boot-maven-plugin</simpara>
<simpara>Very interesting plugin:
<ulink url="http://www.javacodegeeks.com/2014/08/maven-git-release.html">http://www.javacodegeeks.com/2014/08/maven-git-release.html</ulink></simpara>
</section>
<section id="_let_the_force_be_with_you">
<title>Let The Force Be With You</title>
<simpara>The larger a build becomes the more you need to control what happens
and will likely result in later problems you should prevent.</simpara>
<simpara>How can you force rules within in your build?  Sometimes it is not
enough to suggest the best practice you need to force the best
practices within a build. The tool to do so is the
<ulink url="http://maven.apache.org/plugins/maven-enforcer-plugin/">Maven Enforcer Plugin</ulink>.</simpara>
<simpara>One of the basic things is to force your build is built with the
correct Maven version, cause htere exist some things which don&#8217;t work
with older Maven versions etc.  The way to prevent building with the
wrong Maven version was to use the <literal>prerequsites</literal> tag like this:</simpara>
<programlisting language="xml" linenumbering="numbered">&lt;prerequisites&gt;
  &lt;maven&gt;2.2.1&lt;/maven&gt;
&lt;/prerequisites&gt;</programlisting>
<simpara>but based on the improvements in Maven within Maven 3 the
<emphasis>prerequsites</emphasis> part in the pom has been marked as depcrecated and will
not be checked. So to make sure a build will only works with a
particular Maven version for example 3.1.1 you need to go the
following path:</simpara>
<programlisting language="xml" linenumbering="numbered">&lt;project ...&gt;

  &lt;!-- This marked as deprecated for Maven 3.X. This is checked by maven-enforcer-plugin --&gt;
  &lt;!--  https://issues.apache.org/jira/browse/MNG-4840 --&gt;
  &lt;!--  https://issues.apache.org/jira/browse/MNG-5297 --&gt;
  &lt;prerequisites&gt;
    &lt;maven&gt;${maven.version}&lt;/maven&gt;
  &lt;/prerequisites&gt;

  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-enforcer-plugin&lt;/artifactId&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;enforce-maven&lt;/id&gt;
            &lt;goals&gt;
              &lt;goal&gt;enforce&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;rules&gt;
                &lt;requireMavenVersion&gt;
                  &lt;version&gt;${maven.version}&lt;/version&gt;
                &lt;/requireMavenVersion&gt;
              &lt;/rules&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  ..
&lt;/project&gt;</programlisting>
<programlisting language="xml" linenumbering="numbered">&lt;plugin&gt;
  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
  &lt;artifactId&gt;maven-enforcer-plugin&lt;/artifactId&gt;
  &lt;executions&gt;
    &lt;execution&gt;
      &lt;id&gt;enforce-maven&lt;/id&gt;
      &lt;goals&gt;
        &lt;goal&gt;enforce&lt;/goal&gt;
      &lt;/goals&gt;
      &lt;configuration&gt;
        &lt;rules&gt;
          &lt;requireSameVersions&gt;
            &lt;plugins&gt;
              &lt;plugin&gt;org.apache.maven.plugins:maven-surefire-plugin&lt;/plugin&gt;
              &lt;plugin&gt;org.apache.maven.plugins:maven-failsafe-plugin&lt;/plugin&gt;
              &lt;plugin&gt;org.apache.maven.plugins:maven-surefire-report-plugin&lt;/plugin&gt;
            &lt;/plugins&gt;
          &lt;/requireSameVersions&gt;
        &lt;/rules&gt;
      &lt;/configuration&gt;
    &lt;/execution&gt;
  &lt;/executions&gt;
&lt;/plugin&gt;</programlisting>
</section>
</chapter>
</part>
<part id="_making_releases">
<title>Making Releases</title>
<chapter id="_overview_6">
<title>Overview</title>
</chapter>
<chapter id="_the_traditional_maven_way">
<title>The Traditional Maven Way</title>
<simpara>maven-release-plugin etc.
How it works. Pro&#8217;s and con&#8217;s.</simpara>
</chapter>
<chapter id="_releases_the_cd_way">
<title>Releases The CD Way</title>
<simpara>Releases in the time of Continious Delivery. How to solve this via Maven?  Is this possible? Maven 3.2.1.</simpara>
<simpara><ulink url="http://www.youtube.com/watch?v=McTZtyb9M38">http://www.youtube.com/watch?v=McTZtyb9M38</ulink></simpara>
<simpara><ulink url="http://maven.40175.n5.nabble.com/Continuous-Delivery-and-Maven-td3245370.html">http://maven.40175.n5.nabble.com/Continuous-Delivery-and-Maven-td3245370.html</ulink></simpara>
<simpara><ulink url="http://stackoverflow.com/questions/18456111/what-is-the-maven-way-for-project-versions-when-doing-continuous-delivery">http://stackoverflow.com/questions/18456111/what-is-the-maven-way-for-project-versions-when-doing-continuous-delivery</ulink></simpara>
<simpara>An other kind of doing releases..
<ulink url="http://danielflower.github.io/2015/03/08/The-Multi-Module-Maven-Release-Plugin-for-Git.html">http://danielflower.github.io/2015/03/08/The-Multi-Module-Maven-Release-Plugin-for-Git.html</ulink></simpara>
</chapter>
</part>
<part id="_continious_integration_solution">
<title>Continious Integration Solution</title>
<simpara>Jenkins
how to work in relationship with Jenkins.
Which Plugins of Jenkins can be usefull</simpara>
</part>
<part id="_repository_manager">
<title>Repository Manager</title>
<simpara>Why do you need a repository manager?</simpara>
<simpara>What is the idea of RPM</simpara>
<simpara>Proxy to Central, XXx</simpara>
<simpara>Other repositories like primefaces?</simpara>
</part>
<part id="_build_smells">
<title>Build Smells</title>
<chapter id="_creating_multiple_artifacts">
<title>Creating Multiple Artifacts</title>
<literallayout class="monospaced">Multiple Artifacts The Wrong Way</literallayout>
<simpara>Creating multiple jars from a single module? (create a jar from package a.b.c and
create an other jar from packages a.b.d)?</simpara>
<simpara>Examples for build smells:</simpara>
<simpara><ulink url="http://stackoverflow.com/questions/11448184/maven-jar-plugin-include-upper-dir">http://stackoverflow.com/questions/11448184/maven-jar-plugin-include-upper-dir</ulink></simpara>
</chapter>
<chapter id="_not_part_of_the_life_cycle">
<title>Not Part of the Life Cycle</title>
<literallayout class="monospaced">Calling mvn assembly:single or assembly:assemble ? Why not being part of the build? and use mvn package?</literallayout>
</chapter>
<chapter id="_multi_module_builds_2">
<title>Multi Module Builds</title>
<section id="_module_structure">
<title>Module Structure</title>
<itemizedlist>
<listitem>
<simpara>
Parent of a multi-module is <emphasis role="strong">not located</emphasis> at root level of the structure?
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_the_install_hack">
<title>The Install Hack</title>
<simpara>The Install Hack</simpara>
<simpara>You need to do <literal>mvn install</literal> in a multi-module build but <literal>mvn clean package</literal> will not work?</simpara>
</section>
<section id="_separation_of_concerns">
<title>Separation of Concerns</title>
<simpara>Multiple Purposes of a Module</simpara>
<simpara>Use a module for only one purpose not for many. (Separation of Concern)</simpara>
</section>
</chapter>
<chapter id="_testing">
<title>Testing</title>
<itemizedlist>
<listitem>
<simpara>
Not separated unit- and integration tests
  Configuration by using profile for unit and integration tests
</simpara>
</listitem>
<listitem>
<simpara>
Typical indicator having TestSuite class file etc.
</simpara>
</listitem>
</itemizedlist>
</chapter>
<chapter id="_assemblies">
<title>Assemblies</title>
<itemizedlist>
<listitem>
<simpara>
Looking on the file system instead of using the reactor
  Here:
  <ulink url="http://stackoverflow.com/questions/23951547/how-to-create-single-target-from-multi-module-maven-project">http://stackoverflow.com/questions/23951547/how-to-create-single-target-from-multi-module-maven-project</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
Warngings in relationship with maven-assembly-plugin (dir format!)
</simpara>
</listitem>
</itemizedlist>
</chapter>
<chapter id="_problem_with_profiles_and_dependencies">
<title>Problem with Profiles and Dependencies</title>
<simpara><ulink url="http://blog.soebes.de/blog/2013/11/09/why-is-it-bad-to-activate-slash-deactive-modules-by-profiles-in-maven/">http://blog.soebes.de/blog/2013/11/09/why-is-it-bad-to-activate-slash-deactive-modules-by-profiles-in-maven/</ulink></simpara>
</chapter>
<chapter id="_what_about_dependencies_by_profiles">
<title>What about dependencies by profiles?</title>
<simpara>Describe why and how and what the drawbacks are?</simpara>
</chapter>
</part>
<part id="_plugin_development">
<title>Plugin Development</title>
<simpara>How to develop a plugin.
Basics. Annotations?
Example project.</simpara>
<chapter id="_reasons">
<title>Reasons</title>
<simpara>Often i see people developing maven plugins which are superfluous, cause the functionality is already
provided by one of the existing plugins.
There existing serveral reasons to develop a maven plugin in particular if you are working in an environment
which does not allow things.</simpara>
<simpara>So the question is: When should i start to think about creating my own plugin?
Simple answer if the needed functions are not provided by the existing ones.</simpara>
<simpara>I can encourage you to mail information which kind of request you have to the mailing
list which gives the developers / commiters the chance to introduce such kind of requirements
into the existings plugins if it makes sense.
Or you fill in a jira ticket..</simpara>
<simpara>Testing</simpara>
<simpara><ulink url="http://maven.apache.org/plugins/maven-invoker-plugin/">Maven Invoker Plugin</ulink>
Folder structure</simpara>
<simpara>Conventions</simpara>
<simpara>Testing with Spock:
<ulink url="https://github.com/asciidoctor/asciidoctor-maven-plugin">https://github.com/asciidoctor/asciidoctor-maven-plugin</ulink></simpara>
</chapter>
</part>
<part id="_performance_tipps">
<title>Performance tipps</title>
<simpara>incremental builds in Maven.</simpara>
<simpara>Improve the performance of your build.</simpara>
<simpara><ulink url="http://grumpyapache.blogspot.de/2014/05/build-system-performnce-on-windows.html">http://grumpyapache.blogspot.de/2014/05/build-system-performnce-on-windows.html</ulink></simpara>
<simpara>Don&#8217;t use NFS neither do use NTFS&#8230;</simpara>
</part>
<part id="_best_practice">
<title>Best Practice</title>
<chapter id="_generate_into_source_folder">
<title>Generate Into Source Folder</title>
<simpara>generating code into src folder instead of <emphasis>target</emphasis>.
Pro/Cons on that approach..</simpara>
<simpara>In Maven the convention exists to put everything which is generated,
compiled etc. into the <emphasis>target</emphasis> folder of the appropriate module.
Unfortunately in the wild you will find builds which do not follow the
convention and for example generate things into <emphasis>src</emphasis> folder which is
a bad practice (Hint why?).</simpara>
<simpara>So let use think about this a little bit more. The first thing
is if you change something in <emphasis>src</emphasis> folder means your version control
system will be alarmed about such a change which on the other hand means
you will be alarmed about a change which is not really a change, cause
generated code will usually generate the same code from the same source
but usually with some changed timestamp within the generated code.
The consequence on the above is you must exclude some areas from your
version control view to suppress such irritations.</simpara>
<simpara>The next thing is you need to change the configuration of your appropriate
plugins, cause more or less all plugins follow that conventions (ok there
exist some exceptions). This implies your configuration in your pom gets
larger and of course does not follow the conventions over configuration
paradigm.</simpara>
<simpara>Other <emphasis>solutions</emphasis> which fall into the same category do something different.
They generate into a folder within <emphasis>target</emphasis> things like <emphasis>target/generated-code</emphasis>
but they usually missed that plugins usually add the generated code folder
to the project sources folders automatically already.
But in contradiction they explicitly add the generated folder via supplemental
plugins like <emphasis>build-helper-maven-plugin</emphasis> to the sources folder.</simpara>
</chapter>
<chapter id="_dependencies_dependencymanagement">
<title>Dependencies / DependencyManagement</title>
<simpara>Scope only in real dependencies not in dependencyManagement</simpara>
<simpara>means always use scope:test in the real project and not in dependencyManagement</simpara>
</chapter>
<chapter id="_deps_via_props">
<title>Deps via Props</title>
<simpara>Using properties to control the dependencies with a so called company pom?</simpara>
<simpara>Result: Complete build is necessary instead of using released within a build.</simpara>
</chapter>
<chapter id="_company_wide_parent_s">
<title>Company wide parent(s)</title>
<simpara>Manifest setup with master parent.</simpara>
<screen>&lt;configuration&gt;
  &lt;archive&gt;
    &lt;addMavenDescriptor&gt;true&lt;/addMavenDescriptor&gt;
    &lt;index&gt;true&lt;/index&gt;
    &lt;manifest&gt;
      &lt;addDefaultImplementationEntries&gt;true&lt;/addDefaultImplementationEntries&gt;
      &lt;addDefaultSpecificationEntries&gt;true&lt;/addDefaultSpecificationEntries&gt;
    &lt;/manifest&gt;
    &lt;manifestEntries&gt;
      &lt;artifactId&gt;${project.artifactId}&lt;/artifactId&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
      &lt;buildNumber&gt;${buildNumber}&lt;/buildNumber&gt;
      &lt;scmBranch&gt;${scmBranch}&lt;/scmBranch&gt;
    &lt;/manifestEntries&gt;
  &lt;/archive&gt;
&lt;/configuration&gt;</screen>
<simpara>What should be defined in such a parent?
<ulink url="http://stackoverflow.com/questions/24409889/where-should-i-keep-my-companys-parent-pom">http://stackoverflow.com/questions/24409889/where-should-i-keep-my-companys-parent-pom</ulink></simpara>
<simpara>Style Guide for POM files.
SortPom (default style for pom files)</simpara>
<simpara>Why you should never use version ranges?</simpara>
<simpara>No different dependencies via profiles! Why ? The consequences?</simpara>
<simpara>Naming modules based on their artifactId&#8217;s.</simpara>
<simpara>Don&#8217;t do this:
<ulink url="http://stackoverflow.com/questions/23901560/how-to-handle-different-dependencies-requirements-for-web-servers-in-pom-xml">http://stackoverflow.com/questions/23901560/how-to-handle-different-dependencies-requirements-for-web-servers-in-pom-xml</ulink></simpara>
<simpara>Ideas like this:
<ulink url="http://developer-blog.cloudbees.com/2013/03/playing-trade-offs-with-maven.html">http://developer-blog.cloudbees.com/2013/03/playing-trade-offs-with-maven.html</ulink></simpara>
<simpara>This is a bad idea:
<ulink url="http://stackoverflow.com/questions/24104735/embedding-dependencies-resources-in-maven">http://stackoverflow.com/questions/24104735/embedding-dependencies-resources-in-maven</ulink></simpara>
<simpara>What is a good solution for such kind of questions:
<ulink url="http://stackoverflow.com/questions/24248873/maven-package-resources-with-classes">http://stackoverflow.com/questions/24248873/maven-package-resources-with-classes</ulink>
Answer: create a mod-core, mod-war and that&#8217;s it?</simpara>
</chapter>
<chapter id="_building_for_different_environments">
<title>Building for different Environments</title>
<simpara>You are often face with the problem having different environments like
dev, test, prod this is just a simple example how real life is.</simpara>
</chapter>
<chapter id="_how_to_do_good_integration_tests_for_maven_plugins">
<title>How to do good integration tests for maven plugins</title>
<simpara>One of the final tests should be to clean your local repository
and start your integration tests of your plugin from scratch</simpara>
<simpara>rm -fr $HOME/.m2/repository
mvn -Prun-its clean verify</simpara>
<simpara>This should work without any problem.</simpara>
</chapter>
<chapter id="_nexus">
<title>Nexus</title>
<simpara>why the order of the repositories does really matter&#8230;</simpara>
</chapter>
<chapter id="_branching_strategies">
<title>Branching Strategies</title>
<simpara><ulink url="http://stackoverflow.com/questions/24420474/do-you-really-need-to-version-the-trunk-of-a-maven-project">http://stackoverflow.com/questions/24420474/do-you-really-need-to-version-the-trunk-of-a-maven-project</ulink></simpara>
<simpara><ulink url="https://github.com/lewisd32/lint-maven-plugin">https://github.com/lewisd32/lint-maven-plugin</ulink></simpara>
</chapter>
</part>
<part id="_example_appendix">
<title>Example Appendix</title>
<simpara>One or more optional appendixes go here at section level 1.</simpara>
<chapter id="_appendix_sub_section">
<title>Appendix Sub-section</title>
<simpara>Sub-section body.</simpara>
</chapter>
</part>
<part id="_example_bibliography">
<title>Example Bibliography</title>
<simpara>The bibliography list is a style of AsciiDoc bulleted list.</simpara>
<bibliodiv><title>Books</title>
<bibliomixed>
<bibliomisc>
<anchor id="taoup" xreflabel="[taoup]"/>[taoup] Eric Steven Raymond. <emphasis>The Art of Unix
  Programming</emphasis>. Addison-Wesley. ISBN 0-13-142901-9.
</bibliomisc>
</bibliomixed>
<bibliomixed>
<bibliomisc>
<anchor id="walsh-muellner" xreflabel="[walsh-muellner]"/>[walsh-muellner] Norman Walsh &amp; Leonard Muellner.
  <emphasis>DocBook - The Definitive Guide</emphasis>. O&#8217;Reilly &amp; Associates. 1999.
  ISBN 1-56592-580-7.
</bibliomisc>
</bibliomixed>
</bibliodiv>
<bibliodiv><title>Articles</title>
<bibliomixed>
<bibliomisc>
<anchor id="abc2003" xreflabel="[abc2003]"/>[abc2003] Gall Anonim. <emphasis>An article</emphasis>, Whatever. 2003.
</bibliomisc>
</bibliomixed>
</bibliodiv>
</part>
<part id="_example_glossary">
<title>Example Glossary</title>
<simpara>Glossaries are optional. Glossaries entries are an example of a style
of AsciiDoc labeled lists.</simpara>
</part>
<part id="_example_colophon">
<title>Example Colophon</title>
<simpara>Text at the end of a book describing facts about its production.</simpara>
<simpara>This books has been created by using the following tools:
<ulink url="http://git-scm.com">Git</ulink>, <ulink url="http://asciidoc.org/">AsciiDoc</ulink> and
<ulink url="http://www.vim.org">Vim</ulink> for text editing.</simpara>
</part>
<index id="_example_index">
<title>Example Index</title>
</index>
</book>
