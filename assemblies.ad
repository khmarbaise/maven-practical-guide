:sourcedir: examples/assemblies
:link-pre-defined-descriptors: http://maven.apache.org/plugins/maven-assembly-plugin/descriptor-refs.html[pre-defined descriptors]

= Assemblies

== Overview

During the usual usage you will often be faced with the situation to
create a kind of a distribution archive for example 'dist.zip' or
'dist.tar.gz' or other kind of archive flavors. Things which also
happen are to create a so called 'ueber' jar which you can use to call
your java application from the command line (There are other
opportunities as well see Chapter ...).  This chapter will give a wide
overview of the possibilities how you can create the different flavors
of archives which you need to fullfil the requirements of your builds
furthermore we will take a look what kind of mistakes you can make and
how to prevent them.

== Single Executable Artifact

One of the requirements you will often be confronted with is to create
an archive which can simply be executed on command line. This is often
called an 'ueber-jar' or 'fat-jar'.  This can simply be accomplished by
using {link-maven-assembly-plugin}'s {link-pre-defined-descriptors}:

Currently there are four of them:

 1. http://maven.apache.org/plugins/maven-assembly-plugin/descriptor-refs.html#bin[bin]
 2. http://maven.apache.org/plugins/maven-assembly-plugin/descriptor-refs.html#jar-with-dependencies[jar-with-dependencies]
 3. http://maven.apache.org/plugins/maven-assembly-plugin/descriptor-refs.html#src[src]
 4. http://maven.apache.org/plugins/maven-assembly-plugin/descriptor-refs.html#project[project]

So back to our real problem. We start with an example project which looks like this:

[source,xml]
----
include::{sourcedir}/assembly-jar-with-dependencies/pom.xml[]
----

Via using the above pom you will get a jar which contains all the
dependencies you have defined in the pom file as part of the resulting
jar which is named by using a classifier `jar-with-dependencies` to
make it distinguishable from the other artifacts.  The other aspect of
this example project is that you can see how simple it is to create
such an artifact. One thing which should be mentioned about the
{link-maven-assembly-plugin}. It is not bound to any
{link-life-cycle-phase} by default which means you need to bind it to
the life-cylce if you like to use it.

A note about the given example. In real life you should find this 
example suspicious, cause it will use a typical test dependency (TestNG)
without the scope `test` which might be wrong. In this case it is 
only use for example purposes.

== Creating an ZIP Archive

The idea of an zip archive or to be more accurate any archive is to
create an archive which contains particular content which is defined
by the project in the way you like to do that and define how it will look 
like within the archive. This means having a folder structure within
the archive.

== Default Assemblies


  - Default assemblies
  - Archive types
  - Component Descriptors
  - Distribution archive
  - empty folders etc.

Typical scenarios which occur often.

Create a jar with all dependencies which might be used to call simply java programm as a command line 
tool.
Alternatives {link-maven-shade-plugin}.


You would like to create an distribution archive which contains the resulting components of your application.
Examples. 

You would like to create an archive with all sources of your project as well as the sources 
of all the used dependencies:

-------------------
mvn dependency:sources
mvn dependency:copy-dependencies -Dclassifier=sources -DoutputDirectory=target/sources
-------------------

Add here all the examples from my example-assemblies 



Special requirements which you can fullfil with maven-assembly-plugin
http://stackoverflow.com/questions/24311053/how-to-get-the-content-of-a-directory-inside-of-war-that-is-inside-of-an-ear-tha
